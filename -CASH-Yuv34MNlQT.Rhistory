cert1 <- scraped_cleaned_no_outliers %>%
ggplot(aes(x = factor(certificate, levels = c("A",
"B",
"C",
"D",
"E",
"F",
"G",
"nemá")), y = price)) +
geom_boxplot(col = 'steelblue') +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma) +
stat_summary(
fun.data = stat_box_data,
geom = "text",
size = 3
) +
theme_minimal() +
labs(x = "type")
ggplotly(cert1)
stat_box_data <- function(y, upper_limit = max(scraped_cleaned_no_outliers$price) * 1.05) {
return(
data.frame(
y = 0.95 * upper_limit,
label = paste('n =', length(y), '\n',
'x\u0305', ' =', round(mean(y), 0), '\n')
)
)
}
type1 <- scraped_cleaned_no_outliers %>%
ggplot(aes(x = factor(type, levels = c("1 izbový byt",
"2 izbový byt",
"3 izbový byt",
"4 izbový byt",
"5 a viac izbový byt",
"Garsónka",
"Dvojgarsónka")),
y = price)) +
geom_boxplot(col = 'steelblue') +
stat_summary(
fun.data = stat_box_data,
geom = "text",
size = 3
) +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma) +
theme_minimal() +
labs(x = "type")
ggplotly(type1)
stat_box_data <- function(y, upper_limit = max(scraped_cleaned_no_outliers$price) * 1.05) {
return(
data.frame(
y = 0.95 * upper_limit,
label = paste('n =', length(y), '\n',
'x\u0305', ' =', round(mean(y), 0), '\n')
)
)
}
type1 <- scraped_cleaned_no_outliers %>%
ggplot(aes(x = factor(type, levels = c("1 izbový byt",
"2 izbový byt",
"3 izbový byt",
"4 izbový byt",
"5 a viac izbový byt",
"Garsónka",
"Dvojgarsónka")),
y = price)) +
geom_boxplot(col = 'steelblue') +
scale_x_discrete(labels = wrap_format(10)) +
stat_summary(
fun.data = stat_box_data,
geom = "text",
size = 3
) +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma) +
theme_minimal() +
labs(x = "type")
ggplotly(type1)
type1 <- scraped_cleaned_no_outliers %>%
ggplot(aes(x = factor(type, levels = c("1 izbový byt",
"2 izbový byt",
"3 izbový byt",
"4 izbový byt",
"5 a viac izbový byt",
"Garsónka",
"Dvojgarsónka")),
y = price)) +
geom_boxplot(col = 'steelblue') +
scale_x_discrete(labels = wrap_format(15)) +
stat_summary(
fun.data = stat_box_data,
geom = "text",
size = 3
) +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma) +
theme_minimal() +
labs(x = "type")
ggplotly(type1)
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)))
)))) #%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)))))
)))) #%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
rownames = FALSE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)
)
)
)
)#%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)
)
)
),
rownames = FALSE
)#%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 8)
)
)
),
rownames = FALSE
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(1, 2, 8)
)
)
),
rownames = FALSE
)#%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 8)
)
)
),
rownames = FALSE
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 8)
)
)
)
)#%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)
)
)
)
)#%>%
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 9)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(2, 8)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(1, 8)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '200px', targets = c(0, 1, 8)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '150px', targets = c(0, 1, 8)
)
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '150px', targets = c(1)
width = '100px', targets = c(0, 8))
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '150px', targets = c(1),
width = '100px', targets = c(0, 8))
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '150px', targets = c(1),
width = '1250px', targets = c(0, 8))
)
)
)#%>%
# tab_options(table.font.size = 10,
#             table.width = 1100,
#             table.layout = "auto")
head(scraped_cleaned_no_outliers) %>%
mutate_if(is.numeric,
round,
digits = 1) %>%
datatable(
rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '125px', targets = c(0, 1, 8))
)
)
)#%>%
summary(scraped_cleaned_no_outliers) %>%
as.data.frame()  %>%
select(-Var1) %>%
pivot_wider(names_from = Var2, values_from = Freq) %>%
unnest(everything()) %>%
dplyr::rename('district mean index' = 11) %>%
dplyr::rename(municipality = 2) %>%
datatable(rownames = FALSE,
options = list(scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '125px', targets = "_all")
)
))
*
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'number', order = 'AOE', type = 'upper', diag = FALSE, insig = 'p-value', sig.level = -1)
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'number',  type = 'upper', diag = FALSE, insig = 'p-value', sig.level = -1)
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, order = 'AOE', type = 'upper', diag = FALSE, insig = 'p-value', sig.level = -1)
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'number', order = 'AOE', type = 'upper', diag = FALSE, insig = 'p-value', sig.level = -1)
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05))
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig")
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05, 0.1))
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05, 0.1, 0.5))
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05, 0.1, 0.99))
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05), pch.col = 'grey20', pch.cex = 0.9)
all_num_pred <- select_if(scraped_cleaned_no_outliers, is.numeric) %>% drop_na()
M <- cor(all_num_pred)
corrplot(M, method = 'color', order = 'AOE', type = 'upper', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05), pch.col = 'grey20', pch.cex = 0.9)
corrplot(M, method = 'color', order = 'AOE', type = 'upper', addCoef.col = 'black', diag = FALSE, insig = "label_sig" , sig.level = c(0.001, 0.01, 0.05), pch.col = 'grey20', pch.cex = 0.9)
corrplot(M, method = 'color', diag = FALSE, type = 'upper',
sig.level = c(0.001, 0.01, 0.05), pch.cex = 0.9,
insig = 'label_sig', pch.col = 'grey20', order = 'AOE')
method = 'color', order = 'AOE', type = 'upper', addCoef.col = 'black', diag = FALSE, sig.level = c(0.001, 0.01, 0.05), pch.col = 'grey20', pch.cex = 0.9)
corrplot(M, method = 'color', diag = FALSE, type = 'upper',
sig.level = c(0.001, 0.01, 0.05), pch.cex = 0.9,
pch.col = 'grey20', order = 'AOE')
corrplot(M, method = 'color', diag = FALSE, type = 'upper', pch.cex = 0.9,
pch.col = 'grey20', order = 'AOE')
corrplot(M, method = 'color', order = 'AOE', type = 'upper', addCoef.col = 'black', diag = FALSE, )
top_10_districts_chart <- top_bottom_10_districts %>%
ggplot(aes(x = reorder(district, -price), y = price, text = paste0("Price: ",
format(round(price, 0),big.mark=" ",))
)) +
geom_bar(stat='summary', fun.y = "mean", fill='steelblue') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, 350000, by = 50000), labels = comma) +
geom_text(aes(x = reorder(district, -price) ,y = price + 25000, label = adverts_count), size = 3) +
geom_hline(yintercept = 135900, linetype="dashed", color = "red") + #dashed line is median price
labs(x = "district")
ggplotly(top_10_districts_chart, tooltip = "text")
top_10_districts_chart <- top_bottom_10_districts %>%
ggplot(aes(x = reorder(district, -price), y = price, text = paste0("Price: ",
format(round(price, 0),big.mark=" ",))
)) +
geom_bar(stat='summary', fun.y = "mean", fill='steelblue') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, 350000, by = 50000), labels = comma) +
geom_text(aes(x = reorder(district, -price) ,y = price + 25000, label = adverts_count), size = 3) +
geom_hline(yintercept = 135900, linetype="dashed", color = "red") + #dashed line is median price
labs(x = "district") +
theme_minimal()
ggplotly(top_10_districts_chart, tooltip = "text")
top_10_districts_chart <- top_bottom_10_districts %>%
ggplot(aes(x = reorder(district, -price), y = price, text = paste0("Price: ",
format(round(price, 0),big.mark=" ",))
)) +
geom_bar(stat='summary', fun.y = "mean", fill='steelblue') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, 350000, by = 50000), labels = comma) +
geom_text(aes(x = reorder(district, -price) ,y = price + 25000, label = adverts_count), size = 3) +
geom_hline(yintercept = 135900, linetype="dashed", color = "red") + #dashed line is median price
labs(x = "district")
ggplotly(top_10_districts_chart, tooltip = "text")
top_10_districts_chart <- top_bottom_10_districts %>%
ggplot(aes(x = reorder(district, -price), y = price, text = paste0("Price: ",
format(round(price, 0),big.mark=" ",))
)) +
geom_bar(stat='summary', fun.y = "mean", fill='steelblue') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45)) +
scale_y_continuous(breaks = seq(0, 350000, by = 50000), labels = comma) +
geom_text(aes(x = reorder(district, -price) ,y = price + 25000, label = adverts_count), size = 3) +
geom_hline(yintercept = 135900, linetype="dashed", color = "red") + #dashed line is median price
labs(x = "district")
ggplotly(top_10_districts_chart, tooltip = "text")
scraped_cleaned_no_outliers %>%
select(price, index) %>%
drop_na() %>%
ggplot(aes(x = index, y = price)) +
geom_point(col = 'steelblue') +
geom_smooth(method = "lm", se = FALSE, color = "red", aes(group = 1)) +
stat_regline_equation(label.x = 3, label.y = 650000) + # for regression equation
stat_cor(aes(method = "pearson", label = after_stat(rr.label)), label.x = 3, label.y = 600000) + # for R^2
theme_minimal() +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma)
scraped_cleaned_no_outliers %>%
select(price, index) %>%
drop_na() %>%
ggplot(aes(x = index, y = price)) +
geom_point(col = 'steelblue') +
geom_smooth(method = "lm", se = FALSE, color = "red", aes(group = 1)) +
stat_regline_equation(label.x = 3, label.y = 650000) + # for regression equation
stat_cor(aes(method = "pearson", label = after_stat(rr.label)), label.x = 1.5, label.y = 600000) + # for R^2
theme_minimal() +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma)
scraped_cleaned_no_outliers %>%
select(price, index) %>%
drop_na() %>%
ggplot(aes(x = index, y = price)) +
geom_point(col = 'steelblue') +
geom_smooth(method = "lm", se = FALSE, color = "red", aes(group = 1)) +
stat_regline_equation(label.x = 1.5, label.y = 650000) + # for regression equation
stat_cor(aes(method = "pearson", label = after_stat(rr.label)), label.x = 1.5, label.y = 600000) + # for R^2
theme_minimal() +
scale_y_continuous(breaks = seq(0, 700000, by = 100000), labels = comma)
plot(res.aov, 2)
knitr::opts_chunk$set(echo = TRUE)
# load libs
pacman::p_load(bslib, # RMD theme
Hmisc, # rcorr
rio,
tidyverse,
gridExtra, #plots alignment
corrplot, # corrplot
ggpubr,
ggQC, # pareto chart
rstatix, # welch test
plotly, # interactive charts
scales, # scales
DT, # interactive tables
GGally,
patchwork,
janitor, # clean_names
sf) # second imported dataframe contains multipolygons
